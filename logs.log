2023-06-12 21:32:12,710:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-12 21:32:12,711:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-12 21:32:12,711:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-12 21:32:12,711:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-12 21:32:15,215:INFO:Soft dependency imported: prophet: 1.1.4
2023-06-12 22:59:13,630:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-12 22:59:13,630:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-12 22:59:13,630:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-12 22:59:13,630:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-12 22:59:16,966:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-12 22:59:16,966:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-12 22:59:16,966:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-12 22:59:16,966:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-12 22:59:18,057:INFO:Soft dependency imported: prophet: 1.1.4
2023-06-13 19:30:56,436:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-13 19:30:56,436:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-13 19:30:56,436:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-13 19:30:56,436:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-13 19:30:58,941:INFO:Soft dependency imported: prophet: 1.1.4
2023-06-13 19:41:44,508:INFO:PyCaret ClassificationExperiment
2023-06-13 19:41:44,509:INFO:Logging name: clf-default-name
2023-06-13 19:41:44,509:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-06-13 19:41:44,509:INFO:version 3.0.2
2023-06-13 19:41:44,509:INFO:Initializing setup()
2023-06-13 19:41:44,509:INFO:self.USI: 6d2b
2023-06-13 19:41:44,509:INFO:self._variable_keys: {'fix_imbalance', 'exp_name_log', 'fold_shuffle_param', '_ml_usecase', 'fold_generator', 'exp_id', 'pipeline', 'data', 'target_param', '_available_plots', 'memory', 'y_test', 'n_jobs_param', 'y', 'y_train', 'log_plots_param', 'gpu_param', 'seed', 'html_param', 'gpu_n_jobs_param', 'fold_groups_param', 'X_test', 'is_multiclass', 'idx', 'USI', 'X', 'X_train', 'logging_param'}
2023-06-13 19:41:44,509:INFO:Checking environment
2023-06-13 19:41:44,509:INFO:python_version: 3.8.12
2023-06-13 19:41:44,509:INFO:python_build: ('default', 'Oct 12 2021 03:01:40')
2023-06-13 19:41:44,509:INFO:machine: AMD64
2023-06-13 19:41:44,509:INFO:platform: Windows-10-10.0.22621-SP0
2023-06-13 19:41:44,509:INFO:Memory: svmem(total=16861405184, available=5012451328, percent=70.3, used=11848953856, free=5012451328)
2023-06-13 19:41:44,509:INFO:Physical Core: 4
2023-06-13 19:41:44,509:INFO:Logical Core: 8
2023-06-13 19:41:44,509:INFO:Checking libraries
2023-06-13 19:41:44,509:INFO:System:
2023-06-13 19:41:44,509:INFO:    python: 3.8.12 (default, Oct 12 2021, 03:01:40) [MSC v.1916 64 bit (AMD64)]
2023-06-13 19:41:44,509:INFO:executable: c:\Users\choib\anaconda3\envs\iise-python\python.exe
2023-06-13 19:41:44,509:INFO:   machine: Windows-10-10.0.22621-SP0
2023-06-13 19:41:44,509:INFO:PyCaret required dependencies:
2023-06-13 19:41:44,511:INFO:                 pip: 21.0.1
2023-06-13 19:41:44,511:INFO:          setuptools: 58.0.4
2023-06-13 19:41:44,511:INFO:             pycaret: 3.0.2
2023-06-13 19:41:44,511:INFO:             IPython: 8.12.0
2023-06-13 19:41:44,511:INFO:          ipywidgets: 8.0.6
2023-06-13 19:41:44,511:INFO:                tqdm: 4.65.0
2023-06-13 19:41:44,511:INFO:               numpy: 1.21.4
2023-06-13 19:41:44,511:INFO:              pandas: 1.5.3
2023-06-13 19:41:44,511:INFO:              jinja2: 3.1.2
2023-06-13 19:41:44,511:INFO:               scipy: 1.10.1
2023-06-13 19:41:44,511:INFO:              joblib: 1.2.0
2023-06-13 19:41:44,511:INFO:             sklearn: 1.2.2
2023-06-13 19:41:44,511:INFO:                pyod: 1.0.9
2023-06-13 19:41:44,511:INFO:            imblearn: 0.10.1
2023-06-13 19:41:44,511:INFO:   category_encoders: 2.6.1
2023-06-13 19:41:44,511:INFO:            lightgbm: 3.3.5
2023-06-13 19:41:44,511:INFO:               numba: 0.57.0
2023-06-13 19:41:44,511:INFO:            requests: 2.31.0
2023-06-13 19:41:44,512:INFO:          matplotlib: 3.4.3
2023-06-13 19:41:44,512:INFO:          scikitplot: 0.3.7
2023-06-13 19:41:44,512:INFO:         yellowbrick: 1.5
2023-06-13 19:41:44,512:INFO:              plotly: 5.15.0
2023-06-13 19:41:44,512:INFO:             kaleido: 0.2.1
2023-06-13 19:41:44,512:INFO:         statsmodels: 0.14.0
2023-06-13 19:41:44,512:INFO:              sktime: 0.17.0
2023-06-13 19:41:44,512:INFO:               tbats: 1.1.3
2023-06-13 19:41:44,512:INFO:            pmdarima: 2.0.3
2023-06-13 19:41:44,512:INFO:              psutil: 5.9.0
2023-06-13 19:41:44,512:INFO:PyCaret optional dependencies:
2023-06-13 19:41:44,535:INFO:                shap: Not installed
2023-06-13 19:41:44,535:INFO:           interpret: Not installed
2023-06-13 19:41:44,535:INFO:                umap: Not installed
2023-06-13 19:41:44,535:INFO:    pandas_profiling: Not installed
2023-06-13 19:41:44,535:INFO:  explainerdashboard: Not installed
2023-06-13 19:41:44,535:INFO:             autoviz: Not installed
2023-06-13 19:41:44,535:INFO:           fairlearn: Not installed
2023-06-13 19:41:44,535:INFO:             xgboost: Not installed
2023-06-13 19:41:44,535:INFO:            catboost: Not installed
2023-06-13 19:41:44,535:INFO:              kmodes: Not installed
2023-06-13 19:41:44,535:INFO:             mlxtend: Not installed
2023-06-13 19:41:44,535:INFO:       statsforecast: Not installed
2023-06-13 19:41:44,535:INFO:        tune_sklearn: Not installed
2023-06-13 19:41:44,536:INFO:                 ray: Not installed
2023-06-13 19:41:44,536:INFO:            hyperopt: Not installed
2023-06-13 19:41:44,536:INFO:              optuna: Not installed
2023-06-13 19:41:44,536:INFO:               skopt: Not installed
2023-06-13 19:41:44,536:INFO:              mlflow: Not installed
2023-06-13 19:41:44,536:INFO:              gradio: Not installed
2023-06-13 19:41:44,536:INFO:             fastapi: Not installed
2023-06-13 19:41:44,536:INFO:             uvicorn: Not installed
2023-06-13 19:41:44,536:INFO:              m2cgen: Not installed
2023-06-13 19:41:44,536:INFO:           evidently: Not installed
2023-06-13 19:41:44,536:INFO:               fugue: Not installed
2023-06-13 19:41:44,536:INFO:           streamlit: Not installed
2023-06-13 19:41:44,536:INFO:             prophet: 1.1.4
2023-06-13 19:41:44,536:INFO:None
2023-06-13 19:41:44,536:INFO:Set up data.
2023-06-13 19:41:51,427:INFO:PyCaret ClassificationExperiment
2023-06-13 19:41:51,427:INFO:Logging name: clf-default-name
2023-06-13 19:41:51,427:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-06-13 19:41:51,428:INFO:version 3.0.2
2023-06-13 19:41:51,428:INFO:Initializing setup()
2023-06-13 19:41:51,428:INFO:self.USI: 89fe
2023-06-13 19:41:51,428:INFO:self._variable_keys: {'fix_imbalance', 'exp_name_log', 'fold_shuffle_param', '_ml_usecase', 'fold_generator', 'exp_id', 'pipeline', 'data', 'target_param', '_available_plots', 'memory', 'y_test', 'n_jobs_param', 'y', 'y_train', 'log_plots_param', 'gpu_param', 'seed', 'html_param', 'gpu_n_jobs_param', 'fold_groups_param', 'X_test', 'is_multiclass', 'idx', 'USI', 'X', 'X_train', 'logging_param'}
2023-06-13 19:41:51,428:INFO:Checking environment
2023-06-13 19:41:51,428:INFO:python_version: 3.8.12
2023-06-13 19:41:51,428:INFO:python_build: ('default', 'Oct 12 2021 03:01:40')
2023-06-13 19:41:51,429:INFO:machine: AMD64
2023-06-13 19:41:51,429:INFO:platform: Windows-10-10.0.22621-SP0
2023-06-13 19:41:51,429:INFO:Memory: svmem(total=16861405184, available=4948987904, percent=70.6, used=11912417280, free=4948987904)
2023-06-13 19:41:51,429:INFO:Physical Core: 4
2023-06-13 19:41:51,429:INFO:Logical Core: 8
2023-06-13 19:41:51,429:INFO:Checking libraries
2023-06-13 19:41:51,429:INFO:System:
2023-06-13 19:41:51,429:INFO:    python: 3.8.12 (default, Oct 12 2021, 03:01:40) [MSC v.1916 64 bit (AMD64)]
2023-06-13 19:41:51,429:INFO:executable: c:\Users\choib\anaconda3\envs\iise-python\python.exe
2023-06-13 19:41:51,430:INFO:   machine: Windows-10-10.0.22621-SP0
2023-06-13 19:41:51,430:INFO:PyCaret required dependencies:
2023-06-13 19:41:51,430:INFO:                 pip: 21.0.1
2023-06-13 19:41:51,430:INFO:          setuptools: 58.0.4
2023-06-13 19:41:51,430:INFO:             pycaret: 3.0.2
2023-06-13 19:41:51,430:INFO:             IPython: 8.12.0
2023-06-13 19:41:51,430:INFO:          ipywidgets: 8.0.6
2023-06-13 19:41:51,430:INFO:                tqdm: 4.65.0
2023-06-13 19:41:51,431:INFO:               numpy: 1.21.4
2023-06-13 19:41:51,431:INFO:              pandas: 1.5.3
2023-06-13 19:41:51,431:INFO:              jinja2: 3.1.2
2023-06-13 19:41:51,431:INFO:               scipy: 1.10.1
2023-06-13 19:41:51,431:INFO:              joblib: 1.2.0
2023-06-13 19:41:51,431:INFO:             sklearn: 1.2.2
2023-06-13 19:41:51,431:INFO:                pyod: 1.0.9
2023-06-13 19:41:51,431:INFO:            imblearn: 0.10.1
2023-06-13 19:41:51,431:INFO:   category_encoders: 2.6.1
2023-06-13 19:41:51,431:INFO:            lightgbm: 3.3.5
2023-06-13 19:41:51,431:INFO:               numba: 0.57.0
2023-06-13 19:41:51,431:INFO:            requests: 2.31.0
2023-06-13 19:41:51,431:INFO:          matplotlib: 3.4.3
2023-06-13 19:41:51,433:INFO:          scikitplot: 0.3.7
2023-06-13 19:41:51,433:INFO:         yellowbrick: 1.5
2023-06-13 19:41:51,433:INFO:              plotly: 5.15.0
2023-06-13 19:41:51,433:INFO:             kaleido: 0.2.1
2023-06-13 19:41:51,433:INFO:         statsmodels: 0.14.0
2023-06-13 19:41:51,433:INFO:              sktime: 0.17.0
2023-06-13 19:41:51,433:INFO:               tbats: 1.1.3
2023-06-13 19:41:51,433:INFO:            pmdarima: 2.0.3
2023-06-13 19:41:51,433:INFO:              psutil: 5.9.0
2023-06-13 19:41:51,433:INFO:PyCaret optional dependencies:
2023-06-13 19:41:51,433:INFO:                shap: Not installed
2023-06-13 19:41:51,433:INFO:           interpret: Not installed
2023-06-13 19:41:51,433:INFO:                umap: Not installed
2023-06-13 19:41:51,433:INFO:    pandas_profiling: Not installed
2023-06-13 19:41:51,433:INFO:  explainerdashboard: Not installed
2023-06-13 19:41:51,434:INFO:             autoviz: Not installed
2023-06-13 19:41:51,434:INFO:           fairlearn: Not installed
2023-06-13 19:41:51,434:INFO:             xgboost: Not installed
2023-06-13 19:41:51,434:INFO:            catboost: Not installed
2023-06-13 19:41:51,434:INFO:              kmodes: Not installed
2023-06-13 19:41:51,434:INFO:             mlxtend: Not installed
2023-06-13 19:41:51,434:INFO:       statsforecast: Not installed
2023-06-13 19:41:51,434:INFO:        tune_sklearn: Not installed
2023-06-13 19:41:51,434:INFO:                 ray: Not installed
2023-06-13 19:41:51,434:INFO:            hyperopt: Not installed
2023-06-13 19:41:51,435:INFO:              optuna: Not installed
2023-06-13 19:41:51,435:INFO:               skopt: Not installed
2023-06-13 19:41:51,435:INFO:              mlflow: Not installed
2023-06-13 19:41:51,435:INFO:              gradio: Not installed
2023-06-13 19:41:51,435:INFO:             fastapi: Not installed
2023-06-13 19:41:51,435:INFO:             uvicorn: Not installed
2023-06-13 19:41:51,435:INFO:              m2cgen: Not installed
2023-06-13 19:41:51,435:INFO:           evidently: Not installed
2023-06-13 19:41:51,436:INFO:               fugue: Not installed
2023-06-13 19:41:51,436:INFO:           streamlit: Not installed
2023-06-13 19:41:51,436:INFO:             prophet: 1.1.4
2023-06-13 19:41:51,436:INFO:None
2023-06-13 19:41:51,436:INFO:Set up data.
2023-06-13 19:41:51,476:INFO:Set up train/test split.
2023-06-13 19:41:51,506:INFO:Set up index.
2023-06-13 19:41:51,508:INFO:Set up folding strategy.
2023-06-13 19:41:51,508:INFO:Assigning column types.
2023-06-13 19:41:51,525:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-06-13 19:41:51,564:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-13 19:41:51,571:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-06-13 19:41:51,613:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-13 19:41:51,659:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-13 19:41:51,697:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-13 19:41:51,698:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-06-13 19:41:51,725:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-13 19:41:51,725:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-13 19:41:51,725:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-06-13 19:41:51,765:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-06-13 19:41:51,792:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-13 19:41:51,792:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-13 19:41:51,834:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-06-13 19:41:51,860:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-13 19:41:51,861:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-13 19:41:51,861:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-06-13 19:41:51,940:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-13 19:41:51,940:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-13 19:41:52,010:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-13 19:41:52,010:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-13 19:41:52,012:INFO:Preparing preprocessing pipeline...
2023-06-13 19:41:52,017:INFO:Set up date feature engineering.
2023-06-13 19:41:52,017:INFO:Set up simple imputation.
2023-06-13 19:41:52,130:INFO:Finished creating preprocessing pipeline.
2023-06-13 19:41:52,140:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\choib\AppData\Local\Temp\joblib),
         steps=[('date_feature_extractor',
                 TransformerWrapper(exclude=None, include=['ds'],
                                    transformer=ExtractDateTimeFeatures(features=['day',
                                                                                  'month',
                                                                                  'year']))),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['disk_id', 'r_1', 'n_5', 'r_5',
                                             'r_9', 'r_12', 'n_171', 'r_171',
                                             'n...
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated')))],
         verbose=False)
2023-06-13 19:41:52,140:INFO:Creating final display dataframe.
2023-06-13 19:41:52,506:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             label
2                   Target type            Binary
3           Original data shape       (52838, 31)
4        Transformed data shape       (52838, 33)
5   Transformed train set shape       (36986, 33)
6    Transformed test set shape       (15852, 33)
7              Numeric features                29
8                 Date features                 1
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              89fe
2023-06-13 19:41:52,584:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-13 19:41:52,584:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-13 19:41:52,648:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-13 19:41:52,648:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-13 19:41:52,649:INFO:setup() successfully completed in 1.45s...............
2023-06-13 19:41:52,649:INFO:Initializing compare_models()
2023-06-13 19:41:52,649:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-06-13 19:41:52,650:INFO:Checking exceptions
2023-06-13 19:41:52,668:INFO:Preparing display monitor
2023-06-13 19:41:52,712:INFO:Initializing Logistic Regression
2023-06-13 19:41:52,712:INFO:Total runtime is 0.0 minutes
2023-06-13 19:41:52,717:INFO:SubProcess create_model() called ==================================
2023-06-13 19:41:52,718:INFO:Initializing create_model()
2023-06-13 19:41:52,718:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FA1B32A2B0>, model_only=True, return_train_score=False, kwargs={})
2023-06-13 19:41:52,718:INFO:Checking exceptions
2023-06-13 19:41:52,719:INFO:Importing libraries
2023-06-13 19:41:52,719:INFO:Copying training dataset
2023-06-13 19:41:52,745:INFO:Defining folds
2023-06-13 19:41:52,746:INFO:Declaring metric variables
2023-06-13 19:41:52,753:INFO:Importing untrained model
2023-06-13 19:41:52,758:INFO:Logistic Regression Imported successfully
2023-06-13 19:41:52,768:INFO:Starting cross validation
2023-06-13 19:41:52,770:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-13 19:41:58,085:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=2):
ABNORMAL_TERMINATION_IN_LNSRCH.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-06-13 19:41:58,085:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=2):
ABNORMAL_TERMINATION_IN_LNSRCH.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-06-13 19:41:58,086:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=2):
ABNORMAL_TERMINATION_IN_LNSRCH.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-06-13 19:41:58,087:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=2):
ABNORMAL_TERMINATION_IN_LNSRCH.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-06-13 19:41:58,091:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=2):
ABNORMAL_TERMINATION_IN_LNSRCH.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-06-13 19:41:58,102:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=2):
ABNORMAL_TERMINATION_IN_LNSRCH.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-06-13 19:41:58,331:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:41:58,331:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:41:58,331:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:41:58,331:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:41:58,331:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:41:58,332:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:41:58,342:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:41:59,276:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=2):
ABNORMAL_TERMINATION_IN_LNSRCH.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-06-13 19:41:59,293:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=2):
ABNORMAL_TERMINATION_IN_LNSRCH.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-06-13 19:41:59,362:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:41:59,380:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:00,850:INFO:Calculating mean and std
2023-06-13 19:42:00,852:INFO:Creating metrics dataframe
2023-06-13 19:42:01,126:INFO:Uploading results into container
2023-06-13 19:42:01,127:INFO:Uploading model into container now
2023-06-13 19:42:01,128:INFO:_master_model_container: 1
2023-06-13 19:42:01,128:INFO:_display_container: 2
2023-06-13 19:42:01,129:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-06-13 19:42:01,129:INFO:create_model() successfully completed......................................
2023-06-13 19:42:01,211:INFO:SubProcess create_model() end ==================================
2023-06-13 19:42:01,211:INFO:Creating metrics dataframe
2023-06-13 19:42:01,221:INFO:Initializing K Neighbors Classifier
2023-06-13 19:42:01,221:INFO:Total runtime is 0.14181113640467327 minutes
2023-06-13 19:42:01,224:INFO:SubProcess create_model() called ==================================
2023-06-13 19:42:01,224:INFO:Initializing create_model()
2023-06-13 19:42:01,225:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FA1B32A2B0>, model_only=True, return_train_score=False, kwargs={})
2023-06-13 19:42:01,225:INFO:Checking exceptions
2023-06-13 19:42:01,225:INFO:Importing libraries
2023-06-13 19:42:01,225:INFO:Copying training dataset
2023-06-13 19:42:01,248:INFO:Defining folds
2023-06-13 19:42:01,248:INFO:Declaring metric variables
2023-06-13 19:42:01,254:INFO:Importing untrained model
2023-06-13 19:42:01,259:INFO:K Neighbors Classifier Imported successfully
2023-06-13 19:42:01,265:INFO:Starting cross validation
2023-06-13 19:42:01,267:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-13 19:42:04,016:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:04,100:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:04,269:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:04,307:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:04,382:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:04,417:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:06,235:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:06,883:INFO:Calculating mean and std
2023-06-13 19:42:06,884:INFO:Creating metrics dataframe
2023-06-13 19:42:07,130:INFO:Uploading results into container
2023-06-13 19:42:07,132:INFO:Uploading model into container now
2023-06-13 19:42:07,133:INFO:_master_model_container: 2
2023-06-13 19:42:07,133:INFO:_display_container: 2
2023-06-13 19:42:07,133:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-06-13 19:42:07,133:INFO:create_model() successfully completed......................................
2023-06-13 19:42:07,212:INFO:SubProcess create_model() end ==================================
2023-06-13 19:42:07,212:INFO:Creating metrics dataframe
2023-06-13 19:42:07,222:INFO:Initializing Naive Bayes
2023-06-13 19:42:07,222:INFO:Total runtime is 0.24183317025502524 minutes
2023-06-13 19:42:07,226:INFO:SubProcess create_model() called ==================================
2023-06-13 19:42:07,226:INFO:Initializing create_model()
2023-06-13 19:42:07,226:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FA1B32A2B0>, model_only=True, return_train_score=False, kwargs={})
2023-06-13 19:42:07,226:INFO:Checking exceptions
2023-06-13 19:42:07,226:INFO:Importing libraries
2023-06-13 19:42:07,226:INFO:Copying training dataset
2023-06-13 19:42:07,253:INFO:Defining folds
2023-06-13 19:42:07,253:INFO:Declaring metric variables
2023-06-13 19:42:07,257:INFO:Importing untrained model
2023-06-13 19:42:07,261:INFO:Naive Bayes Imported successfully
2023-06-13 19:42:07,271:INFO:Starting cross validation
2023-06-13 19:42:07,273:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-13 19:42:10,076:INFO:Calculating mean and std
2023-06-13 19:42:10,077:INFO:Creating metrics dataframe
2023-06-13 19:42:10,316:INFO:Uploading results into container
2023-06-13 19:42:10,316:INFO:Uploading model into container now
2023-06-13 19:42:10,317:INFO:_master_model_container: 3
2023-06-13 19:42:10,317:INFO:_display_container: 2
2023-06-13 19:42:10,317:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-06-13 19:42:10,317:INFO:create_model() successfully completed......................................
2023-06-13 19:42:10,389:INFO:SubProcess create_model() end ==================================
2023-06-13 19:42:10,389:INFO:Creating metrics dataframe
2023-06-13 19:42:10,400:INFO:Initializing Decision Tree Classifier
2023-06-13 19:42:10,400:INFO:Total runtime is 0.29479929208755495 minutes
2023-06-13 19:42:10,405:INFO:SubProcess create_model() called ==================================
2023-06-13 19:42:10,405:INFO:Initializing create_model()
2023-06-13 19:42:10,405:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FA1B32A2B0>, model_only=True, return_train_score=False, kwargs={})
2023-06-13 19:42:10,405:INFO:Checking exceptions
2023-06-13 19:42:10,405:INFO:Importing libraries
2023-06-13 19:42:10,405:INFO:Copying training dataset
2023-06-13 19:42:10,431:INFO:Defining folds
2023-06-13 19:42:10,432:INFO:Declaring metric variables
2023-06-13 19:42:10,436:INFO:Importing untrained model
2023-06-13 19:42:10,464:INFO:Decision Tree Classifier Imported successfully
2023-06-13 19:42:10,487:INFO:Starting cross validation
2023-06-13 19:42:10,489:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-13 19:42:13,858:INFO:Calculating mean and std
2023-06-13 19:42:13,859:INFO:Creating metrics dataframe
2023-06-13 19:42:14,100:INFO:Uploading results into container
2023-06-13 19:42:14,101:INFO:Uploading model into container now
2023-06-13 19:42:14,102:INFO:_master_model_container: 4
2023-06-13 19:42:14,102:INFO:_display_container: 2
2023-06-13 19:42:14,102:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=123, splitter='best')
2023-06-13 19:42:14,102:INFO:create_model() successfully completed......................................
2023-06-13 19:42:14,174:INFO:SubProcess create_model() end ==================================
2023-06-13 19:42:14,174:INFO:Creating metrics dataframe
2023-06-13 19:42:14,185:INFO:Initializing SVM - Linear Kernel
2023-06-13 19:42:14,186:INFO:Total runtime is 0.35790410041809084 minutes
2023-06-13 19:42:14,190:INFO:SubProcess create_model() called ==================================
2023-06-13 19:42:14,190:INFO:Initializing create_model()
2023-06-13 19:42:14,190:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FA1B32A2B0>, model_only=True, return_train_score=False, kwargs={})
2023-06-13 19:42:14,190:INFO:Checking exceptions
2023-06-13 19:42:14,190:INFO:Importing libraries
2023-06-13 19:42:14,190:INFO:Copying training dataset
2023-06-13 19:42:14,212:INFO:Defining folds
2023-06-13 19:42:14,212:INFO:Declaring metric variables
2023-06-13 19:42:14,219:INFO:Importing untrained model
2023-06-13 19:42:14,224:INFO:SVM - Linear Kernel Imported successfully
2023-06-13 19:42:14,230:INFO:Starting cross validation
2023-06-13 19:42:14,232:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-13 19:42:16,515:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-13 19:42:16,523:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:16,529:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-13 19:42:16,532:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-13 19:42:16,536:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:16,540:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:16,600:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-13 19:42:16,608:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:16,795:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-13 19:42:16,804:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:16,861:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-13 19:42:16,868:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:16,920:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-13 19:42:16,927:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:17,251:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-13 19:42:17,257:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:18,615:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-13 19:42:18,620:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:19,027:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-13 19:42:19,526:INFO:Calculating mean and std
2023-06-13 19:42:19,527:INFO:Creating metrics dataframe
2023-06-13 19:42:19,774:INFO:Uploading results into container
2023-06-13 19:42:19,776:INFO:Uploading model into container now
2023-06-13 19:42:19,776:INFO:_master_model_container: 5
2023-06-13 19:42:19,776:INFO:_display_container: 2
2023-06-13 19:42:19,777:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-06-13 19:42:19,777:INFO:create_model() successfully completed......................................
2023-06-13 19:42:19,849:INFO:SubProcess create_model() end ==================================
2023-06-13 19:42:19,849:INFO:Creating metrics dataframe
2023-06-13 19:42:19,859:INFO:Initializing Ridge Classifier
2023-06-13 19:42:19,859:INFO:Total runtime is 0.4524382869402568 minutes
2023-06-13 19:42:19,862:INFO:SubProcess create_model() called ==================================
2023-06-13 19:42:19,862:INFO:Initializing create_model()
2023-06-13 19:42:19,862:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FA1B32A2B0>, model_only=True, return_train_score=False, kwargs={})
2023-06-13 19:42:19,862:INFO:Checking exceptions
2023-06-13 19:42:19,863:INFO:Importing libraries
2023-06-13 19:42:19,863:INFO:Copying training dataset
2023-06-13 19:42:19,884:INFO:Defining folds
2023-06-13 19:42:19,885:INFO:Declaring metric variables
2023-06-13 19:42:19,888:INFO:Importing untrained model
2023-06-13 19:42:19,894:INFO:Ridge Classifier Imported successfully
2023-06-13 19:42:19,904:INFO:Starting cross validation
2023-06-13 19:42:19,905:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-13 19:42:20,165:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.18952e-27): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-06-13 19:42:20,166:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.1934e-27): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T


2023-06-13 19:42:20,181:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.18075e-27): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-06-13 19:42:20,182:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.18421e-27): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-06-13 19:42:20,199:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.19339e-27): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-06-13 19:42:20,210:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.18387e-27): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-06-13 19:42:20,216:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.18323e-27): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-06-13 19:42:20,223:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-13 19:42:20,226:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-13 19:42:20,228:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-13 19:42:20,231:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:20,235:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:20,236:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:20,241:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-13 19:42:20,242:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-13 19:42:20,250:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:20,255:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:20,256:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-13 19:42:20,263:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:20,271:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-13 19:42:20,277:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-13 19:42:20,278:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:20,285:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:21,061:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.19229e-27): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-06-13 19:42:21,077:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.18282e-27): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-06-13 19:42:21,102:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-13 19:42:21,105:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:21,110:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-13 19:42:21,114:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:22,805:INFO:Calculating mean and std
2023-06-13 19:42:22,806:INFO:Creating metrics dataframe
2023-06-13 19:42:23,069:INFO:Uploading results into container
2023-06-13 19:42:23,070:INFO:Uploading model into container now
2023-06-13 19:42:23,070:INFO:_master_model_container: 6
2023-06-13 19:42:23,070:INFO:_display_container: 2
2023-06-13 19:42:23,071:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2023-06-13 19:42:23,071:INFO:create_model() successfully completed......................................
2023-06-13 19:42:23,145:INFO:SubProcess create_model() end ==================================
2023-06-13 19:42:23,145:INFO:Creating metrics dataframe
2023-06-13 19:42:23,156:INFO:Initializing Random Forest Classifier
2023-06-13 19:42:23,156:INFO:Total runtime is 0.5073893507321676 minutes
2023-06-13 19:42:23,160:INFO:SubProcess create_model() called ==================================
2023-06-13 19:42:23,160:INFO:Initializing create_model()
2023-06-13 19:42:23,160:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FA1B32A2B0>, model_only=True, return_train_score=False, kwargs={})
2023-06-13 19:42:23,161:INFO:Checking exceptions
2023-06-13 19:42:23,161:INFO:Importing libraries
2023-06-13 19:42:23,161:INFO:Copying training dataset
2023-06-13 19:42:23,186:INFO:Defining folds
2023-06-13 19:42:23,187:INFO:Declaring metric variables
2023-06-13 19:42:23,191:INFO:Importing untrained model
2023-06-13 19:42:23,195:INFO:Random Forest Classifier Imported successfully
2023-06-13 19:42:23,204:INFO:Starting cross validation
2023-06-13 19:42:23,205:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-13 19:42:28,699:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.40s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-06-13 19:42:29,289:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.58s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-06-13 19:42:30,541:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:34,121:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:35,348:INFO:Calculating mean and std
2023-06-13 19:42:35,349:INFO:Creating metrics dataframe
2023-06-13 19:42:35,613:INFO:Uploading results into container
2023-06-13 19:42:35,614:INFO:Uploading model into container now
2023-06-13 19:42:35,614:INFO:_master_model_container: 7
2023-06-13 19:42:35,614:INFO:_display_container: 2
2023-06-13 19:42:35,615:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2023-06-13 19:42:35,615:INFO:create_model() successfully completed......................................
2023-06-13 19:42:35,688:INFO:SubProcess create_model() end ==================================
2023-06-13 19:42:35,688:INFO:Creating metrics dataframe
2023-06-13 19:42:35,698:INFO:Initializing Quadratic Discriminant Analysis
2023-06-13 19:42:35,699:INFO:Total runtime is 0.7164443095525106 minutes
2023-06-13 19:42:35,704:INFO:SubProcess create_model() called ==================================
2023-06-13 19:42:35,705:INFO:Initializing create_model()
2023-06-13 19:42:35,705:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FA1B32A2B0>, model_only=True, return_train_score=False, kwargs={})
2023-06-13 19:42:35,705:INFO:Checking exceptions
2023-06-13 19:42:35,705:INFO:Importing libraries
2023-06-13 19:42:35,705:INFO:Copying training dataset
2023-06-13 19:42:35,727:INFO:Defining folds
2023-06-13 19:42:35,727:INFO:Declaring metric variables
2023-06-13 19:42:35,731:INFO:Importing untrained model
2023-06-13 19:42:35,736:INFO:Quadratic Discriminant Analysis Imported successfully
2023-06-13 19:42:35,747:INFO:Starting cross validation
2023-06-13 19:42:35,748:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-13 19:42:39,477:INFO:Calculating mean and std
2023-06-13 19:42:39,478:INFO:Creating metrics dataframe
2023-06-13 19:42:39,740:INFO:Uploading results into container
2023-06-13 19:42:39,741:INFO:Uploading model into container now
2023-06-13 19:42:39,742:INFO:_master_model_container: 8
2023-06-13 19:42:39,742:INFO:_display_container: 2
2023-06-13 19:42:39,742:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-06-13 19:42:39,742:INFO:create_model() successfully completed......................................
2023-06-13 19:42:39,814:INFO:SubProcess create_model() end ==================================
2023-06-13 19:42:39,814:INFO:Creating metrics dataframe
2023-06-13 19:42:39,824:INFO:Initializing Ada Boost Classifier
2023-06-13 19:42:39,825:INFO:Total runtime is 0.7852011601130168 minutes
2023-06-13 19:42:39,830:INFO:SubProcess create_model() called ==================================
2023-06-13 19:42:39,831:INFO:Initializing create_model()
2023-06-13 19:42:39,831:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FA1B32A2B0>, model_only=True, return_train_score=False, kwargs={})
2023-06-13 19:42:39,831:INFO:Checking exceptions
2023-06-13 19:42:39,831:INFO:Importing libraries
2023-06-13 19:42:39,831:INFO:Copying training dataset
2023-06-13 19:42:39,855:INFO:Defining folds
2023-06-13 19:42:39,856:INFO:Declaring metric variables
2023-06-13 19:42:39,861:INFO:Importing untrained model
2023-06-13 19:42:39,866:INFO:Ada Boost Classifier Imported successfully
2023-06-13 19:42:39,873:INFO:Starting cross validation
2023-06-13 19:42:39,874:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-13 19:42:44,802:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:44,998:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:45,739:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:45,751:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:45,799:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:45,881:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:46,012:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:48,526:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:42:49,046:INFO:Calculating mean and std
2023-06-13 19:42:49,047:INFO:Creating metrics dataframe
2023-06-13 19:42:49,373:INFO:Uploading results into container
2023-06-13 19:42:49,374:INFO:Uploading model into container now
2023-06-13 19:42:49,376:INFO:_master_model_container: 9
2023-06-13 19:42:49,376:INFO:_display_container: 2
2023-06-13 19:42:49,377:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=123)
2023-06-13 19:42:49,377:INFO:create_model() successfully completed......................................
2023-06-13 19:42:49,450:INFO:SubProcess create_model() end ==================================
2023-06-13 19:42:49,450:INFO:Creating metrics dataframe
2023-06-13 19:42:49,462:INFO:Initializing Gradient Boosting Classifier
2023-06-13 19:42:49,462:INFO:Total runtime is 0.9458211779594421 minutes
2023-06-13 19:42:49,466:INFO:SubProcess create_model() called ==================================
2023-06-13 19:42:49,466:INFO:Initializing create_model()
2023-06-13 19:42:49,466:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FA1B32A2B0>, model_only=True, return_train_score=False, kwargs={})
2023-06-13 19:42:49,466:INFO:Checking exceptions
2023-06-13 19:42:49,466:INFO:Importing libraries
2023-06-13 19:42:49,466:INFO:Copying training dataset
2023-06-13 19:42:49,491:INFO:Defining folds
2023-06-13 19:42:49,491:INFO:Declaring metric variables
2023-06-13 19:42:49,496:INFO:Importing untrained model
2023-06-13 19:42:49,502:INFO:Gradient Boosting Classifier Imported successfully
2023-06-13 19:42:49,510:INFO:Starting cross validation
2023-06-13 19:42:49,512:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-13 19:43:15,946:INFO:Calculating mean and std
2023-06-13 19:43:15,947:INFO:Creating metrics dataframe
2023-06-13 19:43:16,254:INFO:Uploading results into container
2023-06-13 19:43:16,256:INFO:Uploading model into container now
2023-06-13 19:43:16,256:INFO:_master_model_container: 10
2023-06-13 19:43:16,256:INFO:_display_container: 2
2023-06-13 19:43:16,257:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-06-13 19:43:16,257:INFO:create_model() successfully completed......................................
2023-06-13 19:43:16,330:INFO:SubProcess create_model() end ==================================
2023-06-13 19:43:16,331:INFO:Creating metrics dataframe
2023-06-13 19:43:16,341:INFO:Initializing Linear Discriminant Analysis
2023-06-13 19:43:16,342:INFO:Total runtime is 1.3938324411710104 minutes
2023-06-13 19:43:16,346:INFO:SubProcess create_model() called ==================================
2023-06-13 19:43:16,346:INFO:Initializing create_model()
2023-06-13 19:43:16,346:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FA1B32A2B0>, model_only=True, return_train_score=False, kwargs={})
2023-06-13 19:43:16,346:INFO:Checking exceptions
2023-06-13 19:43:16,346:INFO:Importing libraries
2023-06-13 19:43:16,347:INFO:Copying training dataset
2023-06-13 19:43:16,370:INFO:Defining folds
2023-06-13 19:43:16,370:INFO:Declaring metric variables
2023-06-13 19:43:16,374:INFO:Importing untrained model
2023-06-13 19:43:16,379:INFO:Linear Discriminant Analysis Imported successfully
2023-06-13 19:43:16,388:INFO:Starting cross validation
2023-06-13 19:43:16,390:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-13 19:43:17,224:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:20,476:INFO:Calculating mean and std
2023-06-13 19:43:20,478:INFO:Creating metrics dataframe
2023-06-13 19:43:20,767:INFO:Uploading results into container
2023-06-13 19:43:20,768:INFO:Uploading model into container now
2023-06-13 19:43:20,769:INFO:_master_model_container: 11
2023-06-13 19:43:20,769:INFO:_display_container: 2
2023-06-13 19:43:20,769:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-06-13 19:43:20,769:INFO:create_model() successfully completed......................................
2023-06-13 19:43:20,844:INFO:SubProcess create_model() end ==================================
2023-06-13 19:43:20,844:INFO:Creating metrics dataframe
2023-06-13 19:43:20,854:INFO:Initializing Extra Trees Classifier
2023-06-13 19:43:20,854:INFO:Total runtime is 1.469036630789439 minutes
2023-06-13 19:43:20,860:INFO:SubProcess create_model() called ==================================
2023-06-13 19:43:20,860:INFO:Initializing create_model()
2023-06-13 19:43:20,860:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FA1B32A2B0>, model_only=True, return_train_score=False, kwargs={})
2023-06-13 19:43:20,860:INFO:Checking exceptions
2023-06-13 19:43:20,861:INFO:Importing libraries
2023-06-13 19:43:20,861:INFO:Copying training dataset
2023-06-13 19:43:20,881:INFO:Defining folds
2023-06-13 19:43:20,882:INFO:Declaring metric variables
2023-06-13 19:43:20,885:INFO:Importing untrained model
2023-06-13 19:43:20,890:INFO:Extra Trees Classifier Imported successfully
2023-06-13 19:43:20,897:INFO:Starting cross validation
2023-06-13 19:43:20,899:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-13 19:43:24,272:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.36s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-06-13 19:43:24,339:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.27s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-06-13 19:43:24,660:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.39s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-06-13 19:43:29,766:INFO:Calculating mean and std
2023-06-13 19:43:29,767:INFO:Creating metrics dataframe
2023-06-13 19:43:30,070:INFO:Uploading results into container
2023-06-13 19:43:30,072:INFO:Uploading model into container now
2023-06-13 19:43:30,072:INFO:_master_model_container: 12
2023-06-13 19:43:30,073:INFO:_display_container: 2
2023-06-13 19:43:30,074:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=123, verbose=0, warm_start=False)
2023-06-13 19:43:30,074:INFO:create_model() successfully completed......................................
2023-06-13 19:43:30,146:INFO:SubProcess create_model() end ==================================
2023-06-13 19:43:30,146:INFO:Creating metrics dataframe
2023-06-13 19:43:30,159:INFO:Initializing Light Gradient Boosting Machine
2023-06-13 19:43:30,159:INFO:Total runtime is 1.6241196791330974 minutes
2023-06-13 19:43:30,162:INFO:SubProcess create_model() called ==================================
2023-06-13 19:43:30,162:INFO:Initializing create_model()
2023-06-13 19:43:30,162:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FA1B32A2B0>, model_only=True, return_train_score=False, kwargs={})
2023-06-13 19:43:30,162:INFO:Checking exceptions
2023-06-13 19:43:30,162:INFO:Importing libraries
2023-06-13 19:43:30,163:INFO:Copying training dataset
2023-06-13 19:43:30,186:INFO:Defining folds
2023-06-13 19:43:30,186:INFO:Declaring metric variables
2023-06-13 19:43:30,191:INFO:Importing untrained model
2023-06-13 19:43:30,197:INFO:Light Gradient Boosting Machine Imported successfully
2023-06-13 19:43:30,205:INFO:Starting cross validation
2023-06-13 19:43:30,206:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-13 19:43:36,079:INFO:Calculating mean and std
2023-06-13 19:43:36,080:INFO:Creating metrics dataframe
2023-06-13 19:43:36,409:INFO:Uploading results into container
2023-06-13 19:43:36,410:INFO:Uploading model into container now
2023-06-13 19:43:36,411:INFO:_master_model_container: 13
2023-06-13 19:43:36,411:INFO:_display_container: 2
2023-06-13 19:43:36,412:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-06-13 19:43:36,412:INFO:create_model() successfully completed......................................
2023-06-13 19:43:36,486:INFO:SubProcess create_model() end ==================================
2023-06-13 19:43:36,486:INFO:Creating metrics dataframe
2023-06-13 19:43:36,498:INFO:Initializing Dummy Classifier
2023-06-13 19:43:36,498:INFO:Total runtime is 1.729756474494934 minutes
2023-06-13 19:43:36,501:INFO:SubProcess create_model() called ==================================
2023-06-13 19:43:36,502:INFO:Initializing create_model()
2023-06-13 19:43:36,502:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FA1B32A2B0>, model_only=True, return_train_score=False, kwargs={})
2023-06-13 19:43:36,502:INFO:Checking exceptions
2023-06-13 19:43:36,502:INFO:Importing libraries
2023-06-13 19:43:36,502:INFO:Copying training dataset
2023-06-13 19:43:36,524:INFO:Defining folds
2023-06-13 19:43:36,525:INFO:Declaring metric variables
2023-06-13 19:43:36,529:INFO:Importing untrained model
2023-06-13 19:43:36,533:INFO:Dummy Classifier Imported successfully
2023-06-13 19:43:36,542:INFO:Starting cross validation
2023-06-13 19:43:36,543:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-13 19:43:36,843:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:36,852:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:36,885:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:36,896:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:36,899:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:36,928:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:36,945:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:36,956:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:38,062:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:38,062:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:40,135:INFO:Calculating mean and std
2023-06-13 19:43:40,138:INFO:Creating metrics dataframe
2023-06-13 19:43:40,467:INFO:Uploading results into container
2023-06-13 19:43:40,468:INFO:Uploading model into container now
2023-06-13 19:43:40,468:INFO:_master_model_container: 14
2023-06-13 19:43:40,468:INFO:_display_container: 2
2023-06-13 19:43:40,468:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2023-06-13 19:43:40,469:INFO:create_model() successfully completed......................................
2023-06-13 19:43:40,541:INFO:SubProcess create_model() end ==================================
2023-06-13 19:43:40,541:INFO:Creating metrics dataframe
2023-06-13 19:43:40,563:INFO:Initializing create_model()
2023-06-13 19:43:40,563:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-06-13 19:43:40,564:INFO:Checking exceptions
2023-06-13 19:43:40,566:INFO:Importing libraries
2023-06-13 19:43:40,566:INFO:Copying training dataset
2023-06-13 19:43:40,590:INFO:Defining folds
2023-06-13 19:43:40,590:INFO:Declaring metric variables
2023-06-13 19:43:40,590:INFO:Importing untrained model
2023-06-13 19:43:40,590:INFO:Declaring custom model
2023-06-13 19:43:40,591:INFO:Light Gradient Boosting Machine Imported successfully
2023-06-13 19:43:40,592:INFO:Cross validation set to False
2023-06-13 19:43:40,592:INFO:Fitting Model
2023-06-13 19:43:41,214:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-06-13 19:43:41,215:INFO:create_model() successfully completed......................................
2023-06-13 19:43:41,323:INFO:_master_model_container: 14
2023-06-13 19:43:41,323:INFO:_display_container: 2
2023-06-13 19:43:41,324:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-06-13 19:43:41,324:INFO:compare_models() successfully completed......................................
2023-06-13 19:43:41,324:INFO:Initializing create_model()
2023-06-13 19:43:41,324:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-06-13 19:43:41,324:INFO:Checking exceptions
2023-06-13 19:43:41,376:INFO:Importing libraries
2023-06-13 19:43:41,377:INFO:Copying training dataset
2023-06-13 19:43:41,422:INFO:Defining folds
2023-06-13 19:43:41,422:INFO:Declaring metric variables
2023-06-13 19:43:41,426:INFO:Importing untrained model
2023-06-13 19:43:41,431:INFO:Logistic Regression Imported successfully
2023-06-13 19:43:41,441:INFO:Starting cross validation
2023-06-13 19:43:41,442:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-13 19:43:41,790:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:41,803:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:41,846:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:41,863:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:41,872:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:41,884:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:41,910:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:41,924:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:43,090:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=2):
ABNORMAL_TERMINATION_IN_LNSRCH.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-06-13 19:43:43,120:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=2):
ABNORMAL_TERMINATION_IN_LNSRCH.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-06-13 19:43:43,199:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:43,203:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 19:43:45,237:INFO:Calculating mean and std
2023-06-13 19:43:45,238:INFO:Creating metrics dataframe
2023-06-13 19:43:45,243:INFO:Finalizing model
2023-06-13 19:43:45,420:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=2):
ABNORMAL_TERMINATION_IN_LNSRCH.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-06-13 19:43:45,734:INFO:Uploading results into container
2023-06-13 19:43:45,735:INFO:Uploading model into container now
2023-06-13 19:43:45,746:INFO:_master_model_container: 15
2023-06-13 19:43:45,746:INFO:_display_container: 3
2023-06-13 19:43:45,746:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-06-13 19:43:45,746:INFO:create_model() successfully completed......................................
2023-06-13 19:43:45,850:INFO:Initializing predict_model()
2023-06-13 19:43:45,850:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FA1B32E160>)
2023-06-13 19:43:45,850:INFO:Checking exceptions
2023-06-13 19:43:45,850:INFO:Preloading libraries
2023-06-13 19:43:45,852:INFO:Set up data.
2023-06-13 19:43:45,873:INFO:Set up index.
2023-06-13 19:43:45,957:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-13 20:19:12,396:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\tqdm\std.py:1178: FutureWarning: In a future version of pandas, a length 1 tuple will be returned when iterating over a groupby with a grouper equal to a list of length 1. Don't supply a list with a single grouper to avoid this warning.
  for obj in iterable:

2023-06-13 20:20:13,548:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\tqdm\std.py:1178: FutureWarning: In a future version of pandas, a length 1 tuple will be returned when iterating over a groupby with a grouper equal to a list of length 1. Don't supply a list with a single grouper to avoid this warning.
  for obj in iterable:

2023-06-13 20:28:38,812:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\tqdm\std.py:1178: FutureWarning: In a future version of pandas, a length 1 tuple will be returned when iterating over a groupby with a grouper equal to a list of length 1. Don't supply a list with a single grouper to avoid this warning.
  for obj in iterable:

2023-06-13 20:31:31,583:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\tqdm\std.py:1178: FutureWarning: In a future version of pandas, a length 1 tuple will be returned when iterating over a groupby with a grouper equal to a list of length 1. Don't supply a list with a single grouper to avoid this warning.
  for obj in iterable:

2023-06-13 20:36:10,892:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\tqdm\std.py:1178: FutureWarning: In a future version of pandas, a length 1 tuple will be returned when iterating over a groupby with a grouper equal to a list of length 1. Don't supply a list with a single grouper to avoid this warning.
  for obj in iterable:

2023-06-13 20:36:50,841:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\tqdm\std.py:1178: FutureWarning: In a future version of pandas, a length 1 tuple will be returned when iterating over a groupby with a grouper equal to a list of length 1. Don't supply a list with a single grouper to avoid this warning.
  for obj in iterable:

2023-06-13 20:37:30,429:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\tqdm\std.py:1178: FutureWarning: In a future version of pandas, a length 1 tuple will be returned when iterating over a groupby with a grouper equal to a list of length 1. Don't supply a list with a single grouper to avoid this warning.
  for obj in iterable:

2023-06-13 20:57:32,019:INFO:Initializing create_model()
2023-06-13 20:57:32,020:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=lightgbm, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-06-13 20:57:32,020:INFO:Checking exceptions
2023-06-13 20:57:32,050:INFO:Importing libraries
2023-06-13 20:57:32,050:INFO:Copying training dataset
2023-06-13 20:57:32,081:INFO:Defining folds
2023-06-13 20:57:32,081:INFO:Declaring metric variables
2023-06-13 20:57:32,084:INFO:Importing untrained model
2023-06-13 20:57:32,088:INFO:Light Gradient Boosting Machine Imported successfully
2023-06-13 20:57:32,096:INFO:Starting cross validation
2023-06-13 20:57:32,098:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-13 20:57:41,056:INFO:Calculating mean and std
2023-06-13 20:57:41,057:INFO:Creating metrics dataframe
2023-06-13 20:57:41,063:INFO:Finalizing model
2023-06-13 20:57:41,464:INFO:Uploading results into container
2023-06-13 20:57:41,465:INFO:Uploading model into container now
2023-06-13 20:57:41,476:INFO:_master_model_container: 16
2023-06-13 20:57:41,476:INFO:_display_container: 5
2023-06-13 20:57:41,477:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-06-13 20:57:41,477:INFO:create_model() successfully completed......................................
2023-06-13 20:57:41,597:INFO:Initializing predict_model()
2023-06-13 20:57:41,597:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FA1C6E1C70>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FA00230310>)
2023-06-13 20:57:41,597:INFO:Checking exceptions
2023-06-13 20:57:41,597:INFO:Preloading libraries
2023-06-13 20:57:41,599:INFO:Set up data.
2023-06-13 20:57:41,621:INFO:Set up index.
2023-06-13 23:51:13,395:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\3380775872.py:1: FutureWarning: In a future version of pandas, a length 1 tuple will be returned when iterating over a groupby with a grouper equal to a list of length 1. Don't supply a list with a single grouper to avoid this warning.
  for disk in grouped:

2023-06-13 23:57:30,135:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\98681368.py:6: FutureWarning: In a future version of pandas, a length 1 tuple will be returned when iterating over a groupby with a grouper equal to a list of length 1. Don't supply a list with a single grouper to avoid this warning.
  for name,disk in grouped:

2023-06-13 23:58:03,825:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\3376584169.py:6: FutureWarning: In a future version of pandas, a length 1 tuple will be returned when iterating over a groupby with a grouper equal to a list of length 1. Don't supply a list with a single grouper to avoid this warning.
  for name,disk in grouped:

2023-06-13 23:58:08,801:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1142762787.py:6: FutureWarning: In a future version of pandas, a length 1 tuple will be returned when iterating over a groupby with a grouper equal to a list of length 1. Don't supply a list with a single grouper to avoid this warning.
  for name,disk in grouped:

2023-06-13 23:59:11,586:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\854030263.py:6: FutureWarning: In a future version of pandas, a length 1 tuple will be returned when iterating over a groupby with a grouper equal to a list of length 1. Don't supply a list with a single grouper to avoid this warning.
  for name,disk in grouped:

2023-06-14 00:02:23,784:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\4152817161.py:6: FutureWarning: In a future version of pandas, a length 1 tuple will be returned when iterating over a groupby with a grouper equal to a list of length 1. Don't supply a list with a single grouper to avoid this warning.
  for name,disk in grouped:

2023-06-14 00:06:39,439:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,441:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,442:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,443:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,445:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,446:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,447:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,448:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,448:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,449:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,450:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,451:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,452:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,479:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,480:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,481:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,482:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,483:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,483:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,484:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,485:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,486:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,488:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,490:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,491:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,492:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,493:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,494:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,494:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,495:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,495:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,497:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,498:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,498:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,499:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,500:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,500:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,501:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,503:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,505:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,506:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,507:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,509:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,510:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,511:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,512:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,513:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,513:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,514:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,515:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,515:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,516:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,516:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,517:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,517:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,518:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,519:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,519:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,520:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,522:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,523:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,524:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,524:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,526:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,527:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,527:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,528:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,528:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,529:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,529:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:06:39,530:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\393370866.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,604:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,605:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,606:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,607:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,608:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,609:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,610:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,612:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,612:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,613:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,614:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,614:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,615:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,616:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,616:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,617:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,618:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,618:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,619:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,620:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,620:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,621:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,622:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,622:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,624:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,625:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,626:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,627:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,628:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,629:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,630:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,631:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,632:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,632:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,633:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,634:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,635:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,636:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,636:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:05,638:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\925733326.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,757:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,759:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,760:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,760:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,761:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,762:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,763:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,764:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,765:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,766:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,767:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,768:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,769:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,770:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,771:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,772:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,773:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,773:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,774:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,775:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,775:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,776:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,776:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,777:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,778:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,778:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,779:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,780:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,781:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,782:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,783:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,784:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,784:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,785:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,786:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,786:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,787:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,788:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,789:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:07:30,790:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\2125446987.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,770:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:6: FutureWarning: In a future version of pandas, a length 1 tuple will be returned when iterating over a groupby with a grouper equal to a list of length 1. Don't supply a list with a single grouper to avoid this warning.
  for name,disk in grouped:

2023-06-14 00:08:52,874:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,874:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,875:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,876:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,876:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,878:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,878:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,879:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,879:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,880:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,880:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,881:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,881:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,882:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,882:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,883:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,883:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,884:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,884:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,885:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,885:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,886:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,886:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,887:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,887:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,888:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,888:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,889:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,889:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,890:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,891:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,891:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,892:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,893:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,894:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,894:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,895:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,895:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,896:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,896:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,897:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,897:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:08:52,897:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\235375230.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,798:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\tqdm\std.py:1178: FutureWarning: In a future version of pandas, a length 1 tuple will be returned when iterating over a groupby with a grouper equal to a list of length 1. Don't supply a list with a single grouper to avoid this warning.
  for obj in iterable:

2023-06-14 00:09:05,873:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,874:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,874:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,875:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,875:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,876:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,877:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,877:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,878:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,879:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,879:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,880:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,880:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,881:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,881:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,882:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,882:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,883:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,883:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,884:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,885:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,885:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,886:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,886:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,887:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,887:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,887:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,888:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,888:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,889:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,889:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,891:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,891:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,892:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,892:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,893:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,893:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,894:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,894:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,894:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,895:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,895:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:09:05,896:WARNING:C:\Users\choib\AppData\Local\Temp\ipykernel_35092\1786854406.py:14: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  window_5_df[f'{column}_t_{i}'] = features[column].shift(-i)

2023-06-14 00:44:42,425:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names
  warnings.warn(

2023-06-14 00:48:54,148:WARNING:c:\Users\choib\anaconda3\envs\iise-python\lib\site-packages\sklearn\base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names
  warnings.warn(

